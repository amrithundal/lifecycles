{"version":3,"sources":["logo.svg","lifecycles.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Lifecycles","_this","Object","classCallCheck","this","_super","call","console","log","nextProps","nextState","text","props","react_default","a","createElement","className","React","Component","App","state","showChild","_this2","src","logo","alt","onClick","setState","lifecycles_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uOCoCzBC,2DAjCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACZC,EAAAI,EAAAC,KAAAF,MACAG,QAAQC,IAAI,gBAFAP,uDAKd,WACEM,QAAQC,IAAI,wDAGd,WACED,QAAQC,IAAI,2DAGd,WACED,QAAQC,IAAI,8DAGd,SAAsBC,EAAWC,GAE/B,OADAH,QAAQC,IAAI,yBAA0BC,GAC/BA,EAAUE,OAASP,KAAKQ,MAAMD,2BAGvC,WAEE,OADAJ,QAAQC,IAAI,WAEVK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,kCACCX,KAAKQ,MAAMD,aA5BKM,IAAMC,YC4ChBC,oDAvCb,SAAAA,IAAc,IAAAlB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACZlB,EAAAI,EAAAC,KAAAF,OAEKgB,MAAQ,CACXC,WAAW,EACXV,KAAM,IALIV,4CASd,WAAS,IAAAqB,EAAAlB,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SACzCZ,EAAAC,EAAAC,cAAA,UACEW,QAAS,kBACPJ,EAAKK,SAAS,SAAAP,GAAK,MAAK,CACtBC,WAAYD,EAAMC,eAHxB,qBASAR,EAAAC,EAAAC,cAAA,UACEW,QAAS,kBACPJ,EAAKK,SAAS,SAAAP,GAAK,MAAK,CACtBT,KAAMS,EAAMT,KAAO,cAHzB,eASCP,KAAKgB,MAAMC,UAAYR,EAAAC,EAAAC,cAACa,EAAD,CAAYjB,KAAMP,KAAKgB,MAAMT,OAAW,cAjCxDM,IAAMC,WCMJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.490d36ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Lifecycles extends React.Component {\n  constructor() {\n    super();\n    console.log('constructor!');\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount!');\n  }\n\n  componentDidUpdate() {\n    console.log('componentDidUpdate!');\n  }\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount!');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('shouldComponentUpdate!', nextProps);\n    return nextProps.text !== this.props.text;\n  }\n\n  render() {\n    console.log('render!');\n    return (\n      <div className='lifecycles'>\n        <h3>LIFECYCLES COMPONENT</h3>\n        {this.props.text}\n      </div>\n    );\n  }\n}\n\nexport default Lifecycles;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Lifecycles from './lifecycles.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showChild: true,\n      text: ''\n    };\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <button\n            onClick={() =>\n              this.setState(state => ({\n                showChild: !state.showChild\n              }))\n            }\n          >\n            Toggle Lifecycles\n          </button>\n          <button\n            onClick={() =>\n              this.setState(state => ({\n                text: state.text + '_hello'\n              }))\n            }\n          >\n            Update Text\n          </button>\n          {this.state.showChild ? <Lifecycles text={this.state.text} /> : null}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}